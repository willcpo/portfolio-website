[
	{
	"githubLink":"https://github.com/nyu-software-engineering/restaurant-finder",
	"infoRows": [
				{
					"src":"gifs/RestaurantFinder1.gif",
					"text": "Developed an NYC Restaurant Locator, using Scrum and Agile Methodologies, to connect users based on personalized metrics to optimized search results, by utilizing the Yelp Fusion API for pulling information on 20,000+ local restaurants and storing it in a MongoDB Database along with user profiles"
				},
				{
					"src":"gifs/RestaurantFinder2.gif",
					"text": "Adding Social Networking Functionality allowing users to connect and share ratings and recommendations, including friend news feeds and optimized search results based on the recommendation of trusted acquaintances."
				},
				{
					"src":"img/restaurantFinder3.png",
					"text": "An Express server stores MongoDB data and redirects to a React Server port posting and updating Bootstrap created Webpage"
				},
				{
					"src":"",
					"text": "MongoDB, Express.js, React.js, Node.js, JavaScript, Bootstrap, Yelp Fusion API, Path.js HTML, CSS, Cookies, Unit Testing, Continuous Integration"
				}
				]
	},
	{
		"githubLink":"https://github.com/nyu-csci-ua-0480-008-spring-2019/willcpo-final-project",
		"infoRows": [
					{
						"src":"gifs/newsWiz1.gif",
						"text": "Developed a RSS Feed Reader that can display and search through hundreds of feeds and display thousands of stories when one of potentially thousands of users' login"
					},
					{
						"src":"gifs/newsWiz3.gif",
						"text": "Users can add new feeds to the database or search through ones added by previous users"
					},
					{
						"src":"gifs/newsWiz2.gif",
						"text": "Users can favorite thousands of feeds and stories significant to them"
					},
					{
						"src":"",
						"text": "passport local, rss-parser, mongoose, handlebars, express, cookie-parser, bcrypt, connect-ensure-login"
					}
					]
	},
	{
		"githubLink":"https://github.com/willcpo/Planner-Pet",
		"infoRows": [
					{
						"src":"gifs/plannerPet3.gif",
						"text": "Created a Task Management app integrated with Notifications and a Calendar View. Thousands of Tasks can be stored in a mySQL database via Core Data and viewable in a Table View"
					},
					{
						"src":"gifs/plannerPet2.gif",
						"text": "Data on how task are completed is connected to the health of an cartoon Pet. Completion of tasks allows animated interactions with the pet and the ability to play games developed in SpriteKit"
					},
					{
						"src":"gifs/plannerPet1.gif",
						"text": ""
					},
					{
						"src":"",
						"text": "Objective C, NSNotificationCenter, Sprite Kit, Core Data (SQL), Foundation, UIKit, Coca Touch, MVC Pattern, Interface Builder, Outlets, Object-Oriented Programming, Segues, TableView, OpenSource"
					}
					]
	},
	{
		"githubLink":"http://github.com/willcpo/net-Web-Server",
		"infoRows": [
					{
						"src":"gifs/netServer1.gif",
						"text": "Used Node.js & the net module to create a reusable express-like web framework and a TCP/IP server of custom and static server routes"
					},
					{
						"src":"gifs/netServer2.gif",
						"text": "Utilized the created server to handle routes for a webpage generating randomized animal photos in randomized displays"
					},
					{
						"src":"",
						"text": "Node.js, JavaScript, net.js, path.js, path.js, fs.js, Object-Oriented Programming, Routes, Middleware, Static Server, Unit Testing"
					}
					]
	},
	{
		"githubLink":"http://github.com/willcpo/iOS-Gradebook",
		"infoRows": [
					{
						"src":"gifs/iosGrader.gif",
						"text": "Objective-C iOS app that allowed the user to create, browse and display data and test scores on specific students"
					},
					{
						"src":"",
						"text": "Objective C, Foundation, UIKit, Coca Touch, MVC Pattern, Interface Builder, Outlets, Object-Oriented Programming, Segues"
					}
					]
	},
	{
		"githubLink":"http://github.com/willcpo/Connect-4-Clone",
		"infoRows": [
					{
						"src":"gifs/connect4.gif",
						"text": "Command-Line interactive PVC game used customized emoji board pieces to simulate the Connect Four game in the console."
					},
					{
						"src":"",
						"text": "Node.js, Readline-Sync.js, wcwidth.js, clear.js, Command-Line User Interface, Object-Oriented Programming, Unit Testing"
					}
					]
	},
	{
		"githubLink":"http://github.com/willcpo/Analyze-Weather-Data",
		"infoRows": [
					{
						"src":"gifs/weatherData.gif",
						"text": "Generated reports analyzing averages and statistical bounds of historical weather data using a remote API containing JSON data"
					},
					{
						"src":"",
						"text": "Node.js, request.js, fs.js, path.js, API fetching and parsing, JSON, Data Analysis, Object-Oriented Programming, Unit Testing"
					}
					]
	},
	{
		"githubLink":"http://github.com/willcpo/FroggerClone",
		"infoRows": [
					{
						"src":"gifs/frogger.gif",
						"text": "Utilized Java and the Processing Library to create an interactive game where the goal is to avoid traffic and collect coins to win"
					},
					{
						"src":"",
						"text": "Java 8, Processing 3, Object-Oriented Programming, Graphics and AnimationJava 8, Processing 3, Object-Oriented Programming, Graphics and Animation"
					}
					]
	}
]